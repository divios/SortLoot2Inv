import org.apache.tools.ant.taskdefs.condition.Os

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'maven-publish'
    id "com.github.johnrengelman.shadow" version "7.1.1"
}


repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }

    maven {
        url = uri('https://jitpack.io/')
    }

    maven {
        url = uri('https://repo.codemc.org/repository/maven-public')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.18-R0.1-SNAPSHOT'

    implementation 'org.jetbrains:annotations:22.0.0'
    implementation 'org.bstats:bstats-bukkit:2.2.1'
    implementation 'de.tr7zw:item-nbt-api-plugin:2.9.0-SNAPSHOT'
    implementation 'com.github.cryptomorin:XSeries:8.6.0.0.1'
    implementation 'com.github.Redempt:RedLib:6.4.0.1'
}

shadowJar {
    relocate('org.jetbrains.annotations', 'io.github.divios.dependencies.annotations')
    relocate('org.bstats', 'io.github.divios.dependencies.bstats')
    relocate('de.tr7zw', 'io.github.divios.dependencies.nbt')
    relocate('io.github.divios.core_lib', 'io.github.divios.dependencies.Core_lib')
    relocate('io.github.divios.jcommands', 'io.github.divios.dependencies.jCommands')
    relocate('com.cryptomorin.xseries', 'io.github.divios.dependencies.XSeries')
    relocate('redempt.redlib', 'io.github.divios.dependencies.RedLib')
    minimize()
}

group = 'io.github.divios'
def pluginVersion = '1.7'
description = 'SortLoot2Inv'
java.sourceCompatibility = JavaVersion.VERSION_1_8

task updateJars {
    doLast {
        // windows
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into 'C:/Users/serbe/OneDrive/Desktop/server_pruebas/server/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
        } else if (Os.isFamily(Os.FAMILY_MAC)) {  // MAC
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into '/Users/sergiobernalparrondo/Desktop/servers/server-1.18/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into '/Users/sergiobernalparrondo/Desktop/servers/server-1.17/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into '/Users/sergiobernalparrondo/Desktop/servers/server-1.13/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into '/Users/sergiobernalparrondo/Desktop/servers/server-1.12/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
            copy {
                from 'build/libs/SortLoot2Inv'  + "-all.jar"
                into '/Users/sergiobernalparrondo/Desktop/servers/server-1.8/plugins'
                rename("SortLoot2Inv"  + "-all.jar"
                        , "SortLoot2Inv"  + ".jar")
            }
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

processResources {
    filesNotMatching(["*.db"]) {
        expand projectVersion: pluginVersion
    }
}

task deploy(dependsOn: ["build", "updateJars"]) {
    updateJars.mustRunAfter jar
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

compileJava.dependsOn clean
build.dependsOn shadowJar

